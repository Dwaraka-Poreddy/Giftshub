{"version":3,"file":"static/js/4247.00eee6fb.chunk.js","mappings":"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","sources":["AboutQuiz/LiveQuestionCard.js","ScheduledLivePages/ScheduledLiveAboutQuiz.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./AboutQuiz.css\";\nimport items from \"./questions\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nexport default function AboutQuiz({ quesArray, answersArray, fbimg }) {\n  const [showplayAgain, setshowPlayagain] = useState(false);\n  const [correct, setcorrect] = useState(0);\n  const [quesnumber, setquesnumber] = useState(0);\n  const [divheight, setdivheight] = useState(600 / quesArray.length + \"px\");\n  const [bgcolrs, setbgcolrs] = useState([\n    \"red\",\n    \"blue\",\n    \"orange\",\n    \"green\",\n    \"yellow\",\n    \"purple\",\n    \"red\",\n    \"blue\",\n    \"orange\",\n    \"green\",\n    \"yellow\",\n    \"purple\",\n    \"red\",\n    \"blue\",\n    \"orange\",\n    \"green\",\n    \"yellow\",\n    \"purple\",\n  ]);\n  const getRandomInt = (max) => {\n    return Math.floor(Math.random() * Math.floor(max));\n  };\n  const handleoptionclick = (index) => {\n    if (answersArray[quesnumber] == index) {\n      setcorrect(correct + 1);\n      var sheeps = bgcolrs;\n      var num = getRandomInt(quesArray.length);\n      while (sheeps[num] == \"transparent\") {\n        num = getRandomInt(quesArray.length);\n        console.log(num);\n      }\n      sheeps[num] = \"transparent\";\n      setbgcolrs(sheeps);\n    }\n    if (quesnumber + 1 == quesArray.length) {\n      setshowPlayagain(true);\n    }\n    if (quesnumber + 1 < quesArray.length) {\n      setquesnumber(quesnumber + 1);\n    }\n  };\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-lg-6 mb-3\">\n            <div\n              style={{\n                backgroundImage: \"url(\" + fbimg + \")\",\n                transition: \"all 0.5s ease-out\",\n                // height: calc(width / 2),\n                width: \"100%\",\n                // height: \"75vh\",\n                // maxHeight: \"600px\",\n                maxwidth: \"450px\",\n                margin: \"auto\",\n                backgroundSize: \"cover\",\n              }}\n              src={fbimg}\n              alt=\"\"\n            >\n              {quesArray.map((item, index) => {\n                return (\n                  <div\n                    style={{\n                      width: \"100%\",\n                      backgroundColor: bgcolrs[index],\n                      height: divheight,\n                      opacity: \"0.8\",\n                      transition: \"all 1s ease-out\",\n                    }}\n                  ></div>\n                );\n              })}\n            </div>\n          </div>\n          <div className=\"col-lg-6 mb-3\">\n            {!showplayAgain ? (\n              <div class=\"container\">\n                <div class=\"card p-3\">\n                  {quesnumber > 0 ? (\n                    <h4 style={{ textAlign: \"center\" }}>\n                      {correct} Correct out of {quesnumber}\n                    </h4>\n                  ) : null}\n\n                  <h4\n                    style={{\n                      color: \"#3e6ef3\",\n                      fontSize: \"1.5rem\",\n                      fontWeight: \"500\",\n                      lineHeight: \"1.2\",\n                      textAlign: \"center\",\n                    }}\n                  >\n                    {\" \"}\n                    {console.log(\n                      items[quesArray[quesnumber]].question2_live,\n                      \"itemsarray\"\n                    )}\n                    {items[quesArray[quesnumber]].question2_live}\n                  </h4>\n                  <center>\n                    <div\n                      className=\"questions row\"\n                      style={{ maxWidth: \"400px\" }}\n                    >\n                      {items[quesArray[quesnumber]].options.map(\n                        (item, index) => {\n                          return (\n                            <div class=\" col-6 mb-2\">\n                              <div\n                                class=\"card\"\n                                onClick={() => {\n                                  handleoptionclick(index);\n                                }}\n                              >\n                                <img\n                                  style={{ width: \"100%\" }}\n                                  src={require(\"./imgquiz/\" +\n                                    items[quesArray[quesnumber]].images[index])}\n                                  // src={\n                                  //   items[quesArray[quesnumber]].images[index]\n                                  // }\n                                  alt=\"\"\n                                />\n                                {item}\n                              </div>\n                            </div>\n                          );\n                        }\n                      )}\n                    </div>\n                  </center>\n                </div>\n              </div>\n            ) : (\n              <div>\n                <h4\n                  style={{\n                    color: \"#3e6ef3\",\n                    fontSize: \"1.5rem\",\n                    fontWeight: \"500\",\n                    lineHeight: \"1.2\",\n                    textAlign: \"center\",\n                    lineHeight: \"1.2\",\n                  }}\n                >\n                  Total Score {correct} out of {quesArray.length}\n                </h4>\n                <center>\n                  <button\n                    class=\"btn btn-success\"\n                    onClick={() => {\n                      setshowPlayagain(false);\n                      setcorrect(0);\n                      setquesnumber(0);\n                      setbgcolrs([\n                        \"red\",\n                        \"blue\",\n                        \"orange\",\n                        \"green\",\n                        \"yellow\",\n                        \"purple\",\n                        \"red\",\n                        \"blue\",\n                        \"orange\",\n                        \"green\",\n                        \"yellow\",\n                        \"purple\",\n                        \"red\",\n                        \"blue\",\n                        \"orange\",\n                        \"green\",\n                        \"yellow\",\n                        \"purple\",\n                      ]);\n                    }}\n                  >\n                    Play Again\n                  </button>\n                </center>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport LiveQuestionCard from \"../AboutQuiz/LiveQuestionCard\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Loader from \"react-loader-spinner\";\nimport firebase from \"../firebase\";\nimport ScheduledLiveNavBar from \"../NavBars/ScheduledLiveNavBar\";\nimport CircleTimer from \"./CircleTimer\";\nexport default function ScheduledLiveAboutQuiz({ match }) {\n  const database = firebase.firestore();\n\n  let dispatch = useDispatch();\n  const [today, settoday] = useState();\n  const [fbimg, setfbimg] = useState(\"\");\n  const [quesArray, setquesArray] = useState([]);\n  const [answersArray, setanswersArray] = useState([]);\n  const [Livelinks, setLivelinks] = useState(\"\");\n  const [loading, setloading] = useState(true);\n  const [dataurl, setdataurl] = useState([]);\n\n  async function getDoc() {\n    setloading(true);\n    const snapshot = await database\n      .collection(\"Livelinks\")\n      .doc(match.params.slug)\n      .get();\n    const data = snapshot.data();\n    setLivelinks(data);\n    data.array_data.map((item, index) => {\n      if (item.id == \"aboutquiz\") {\n        settoday(index);\n        dispatch({\n          type: \"ACTIVE_STEP\",\n          payload: { day: index + 1 },\n        });\n      }\n      dataurl[index] = item.url;\n    });\n  }\n  useEffect(async () => {\n    await getDoc();\n    // setloading(false);\n  }, []);\n\n  useEffect(() => {\n    setloading(true);\n    const todoRef = firebase\n      .database()\n      .ref(\"/AboutQuiz/\" + match.params.id)\n      .once(\"value\")\n      .then((snapshot) => {\n        var img = snapshot.val().url;\n        setfbimg(img);\n        var quesArray = snapshot.val().quesArray;\n        setquesArray(quesArray);\n        var answersArray = snapshot.val().answersArray;\n        setanswersArray(answersArray);\n        setloading(false);\n      });\n  }, []);\n\n  const calculateTimeLeft = () => {\n    let year = new Date().getFullYear();\n    var difference =\n      +new Date(Livelinks.Bday_date) -\n      +new Date() -\n      19800000 -\n      86400000 * (dataurl.length - today);\n    console.log(difference, \"difference\");\n    let timeLeft = {};\n\n    if (difference > 0) {\n      timeLeft = {\n        days: Math.floor(difference / (1000 * 60 * 60 * 24)),\n        hours: Math.floor((difference / (1000 * 60 * 60)) % 24),\n        minutes: Math.floor((difference / 1000 / 60) % 60),\n        seconds: Math.floor((difference / 1000) % 60),\n      };\n    }\n\n    return timeLeft;\n  };\n\n  const [timeLeft, setTimeLeft] = useState(calculateTimeLeft());\n\n  useEffect(() => {\n    setTimeout(() => {\n      setTimeLeft(calculateTimeLeft());\n    }, 1000);\n  });\n  const timerComponents = [];\n\n  Object.keys(timeLeft).forEach((interval) => {\n    if (!timeLeft[interval]) {\n      return;\n    }\n\n    timerComponents.push(\n      <span>\n        {timeLeft[interval]} {interval}{\" \"}\n      </span>\n    );\n  });\n\n  return (\n    <div style={{ backgroundColor: \"#70cff3\", height: \"100vh\" }}>\n      <ScheduledLiveNavBar slug={match.params.slug} />\n      <br />\n      <br />\n      <br />\n      <div style={{ backgroundColor: \"#70cff3\" }}>\n        {loading ? (\n          <Loader\n            type=\"BallTriangle\"\n            color=\"#00BFFF\"\n            height={100}\n            width={100}\n          />\n        ) : (\n          <div>\n            {new Date(Livelinks.Bday_date) -\n              +new Date() -\n              19800000 -\n              86400000 * (dataurl.length - today - 1) >\n            0 ? (\n              <div>\n                <h5 className=\"example\"> This Gift opens in </h5>\n                <CircleTimer\n                  Bday={\n                    +new Date(Livelinks.Bday_date) -\n                    +new Date() -\n                    19800000 -\n                    86400000 * (dataurl.length - today - 1)\n                  }\n                />\n              </div>\n            ) : (\n              <div>\n                <center>\n                  {\" \"}\n                  {dataurl.length - today - 1 == 0 ? (\n                    <h1 className=\"example\">The Big day is here !!!</h1>\n                  ) : dataurl.length - today - 1 == 1 ? (\n                    <h1 className=\"example\">\n                      {dataurl.length - today - 1} day to go !!!\n                    </h1>\n                  ) : (\n                    <h1 className=\"example\">\n                      {dataurl.length - today - 1} days to go !!!\n                    </h1>\n                  )}\n                </center>\n                {console.log(quesArray, \"quesarray\")}\n                {console.log(answersArray, \"answerArray\")}\n                <LiveQuestionCard\n                  quesArray={quesArray}\n                  answersArray={answersArray}\n                  fbimg={fbimg}\n                />\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n"],"names":["AboutQuiz","quesArray","answersArray","fbimg","useState","showplayAgain","setshowPlayagain","correct","setcorrect","quesnumber","setquesnumber","length","divheight","bgcolrs","setbgcolrs","getRandomInt","max","Math","floor","random","className","style","backgroundImage","transition","width","maxwidth","margin","backgroundSize","src","alt","map","item","index","backgroundColor","height","opacity","color","fontSize","fontWeight","lineHeight","textAlign","class","onClick","console","log","items","question2_live","maxWidth","options","sheeps","num","handleoptionclick","require","images","ScheduledLiveAboutQuiz","match","database","firebase","dispatch","useDispatch","today","settoday","setfbimg","setquesArray","setanswersArray","Livelinks","setLivelinks","loading","setloading","dataurl","getDoc","collection","doc","params","slug","get","snapshot","data","array_data","id","type","payload","day","url","useEffect","ref","once","then","img","val","calculateTimeLeft","Date","getFullYear","difference","Bday_date","timeLeft","days","hours","minutes","seconds","setTimeLeft","setTimeout","timerComponents","Object","keys","forEach","interval","push","Bday"],"sourceRoot":""}